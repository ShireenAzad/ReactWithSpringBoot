version: '3.7'

# Define services
services:
  terraform:
    image: hashicorp/terraform
    volumes:
      - .:/infra
    working_dir: /infra
    environment:
      - AWS_ACCESS_KEY_ID= ${AWS_ACCESSS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY= ${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN= ${AWS_SESSION_TOKEN}
  # App backend service
  app-server:
    image: employeeportal
    # Configuration for building the docker image for the backend service
    build:
      context: . # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:postgresql://employeeportaldatabase.cpawowm31yem.ap-south-1.rds.amazonaws.com:5432/db?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: compose-postgres
      SPRING_DATASOURCE_PASSWORD: compose-postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service
  app-client:
    image: frontendserver
    build:
      context: . # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
    ports:
      - "3000:80" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend

  # Database Service (Postgres)
  db:
    image: postgres:13.1-alpine
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_DB: "db"
      POSTGRES_USER: compose-postgres
      POSTGRES_PASSWORD: compose-postgres
      POSTGRES_ROOT_PASSWORD: root
      POSTGRES_HOST_AUTH_METHOD: "trust"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend

# Volumes
volumes:
  db_data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend: